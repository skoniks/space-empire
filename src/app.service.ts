import { PromptContext } from '@puregram/prompt';
import { SessionContext } from '@puregram/session';
import {
  CallbackQueryContext,
  HTML,
  InlineKeyboard,
  MessageContext,
} from 'puregram';
import BOT from './bot.module';
import User from './entities/user.entity';

enum Actions {
  back,
  fresh,
  colony,
  military,
  trade,
  help,
}

async function authorize(
  context:
    | (MessageContext & PromptContext)
    | (CallbackQueryContext & PromptContext),
) {
  if (!context.senderId) throw new Error('Invalid senderId');
  const user = await User.findOne({ where: { chat: context.senderId } });
  if (user) return user;
  const message =
    HTML.italic(
      '–¢—Ä–µ—Ç—å—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞ –∑–∞—Å—Ç–∞–≤–∏–ª–∞ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ –ø–æ–∫–∏–Ω—É—Ç—å —Ä–æ–¥–Ω–æ–π –¥–æ–º,' +
        ' –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ –ø–æ–∏—Å–∫–∏ –Ω–æ–≤–æ–≥–æ, –±–æ—Ä–æ–∑–¥—è –ø—Ä–æ—Å—Ç–æ—Ä—ã –±–µ—Å–∫—Ä–∞–π–Ω–µ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π.' +
        ' –í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º –ª–∏–Ω–∫–æ—Ä–æ–º –∫–ª–∞—Å—Å–∞ XL, –æ–¥–Ω–∏–º –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞' +
        ' —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–≤—á–µ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ª—é–¥–∏ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –∏–∑–±–µ–≥–∞—è –≤–æ–π–Ω—ã. –í–∞—à–∞' +
        ' –∑–∞–¥–∞—á–∞ - –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫–æ–ª–æ–Ω–∏—é –Ω–∞ –±–æ—Ä—Ç—É –∫ –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—é, –Ω–∞—Ä–∞—â–∏–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ' +
        ' –∏ –∞—Ä–º–∏—é, –∑–∞—â–∏—â–∞—Ç—å –∫–æ–ª–æ–Ω–∏—Å—Ç–æ–≤. –ò–∑–±—Ä–∞—Ç—å –ø—É—Ç—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –±—É–¥–µ—Ç–µ –≤–µ—Å—Ç–∏ –ª—é–¥–µ–π' +
        ' –≤ —Å–≤–µ—Ç–ª–æ–µ –±—É–¥—É—â–µ–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ, –Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–ª–æ–Ω–∏–∏‚Ä¶',
    ) + '\n\n[–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–ª–æ–Ω–∏–∏]';
  let { text } = await context.prompt(message, { parse_mode: 'HTML' });
  text = (text || context.senderId.toString(16)).substring(0, 10);
  return await User.create({ chat: context.senderId, name: text });
}

async function mainMenu(
  context:
    | (MessageContext & SessionContext)
    | (CallbackQueryContext & SessionContext),
  user: User,
) {
  if (!context.senderId) throw new Error('Invalid senderId');
  const message = [
    `üö© –ö–æ–ª–æ–Ω–∏—è:  ${HTML.bold(user.name)} [LVL ${user.level}]\n`,
    `üí∏ –ö—Ä–µ–¥–∏—Ç—ã:      ${HTML.bold(`${user.money}`)}`,
    `‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è:       ${HTML.bold(`${user.power}`)}`,
    `üíé –ú–∏–Ω–µ—Ä–∞–ª—ã:  ${HTML.bold(`${user.iron}`)}`,
    `üçñ –ü—Ä–æ–≤–∏–∑–∏—è:    ${HTML.bold(`${user.food}`)}`,
  ].join('\n');
  const keyboard = InlineKeyboard.keyboard([
    [
      InlineKeyboard.textButton({
        text: 'üö© –ö–æ–ª–æ–Ω–∏—è',
        payload: { action: Actions.colony },
      }),
      InlineKeyboard.textButton({
        text: '‚öîÔ∏è –ê—Ä–º–∏—è',
        payload: { action: Actions.military },
      }),
    ],
    [
      InlineKeyboard.textButton({
        text: '‚öñÔ∏è –ë–∏—Ä–∂–∞',
        payload: { action: Actions.trade },
      }),
      InlineKeyboard.textButton({
        text: 'üìî –°–ø—Ä–∞–≤–∫–∞',
        payload: { action: Actions.help },
      }),
    ],
    [
      InlineKeyboard.textButton({
        text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
        payload: { action: Actions.fresh },
      }),
    ],
  ]);
  const { message_id } = await BOT.api.sendMessage({
    chat_id: context.senderId,
    text: message,
    reply_markup: keyboard,
    parse_mode: 'HTML',
  });
  if (context.session.last) {
    await BOT.api.deleteMessage({
      chat_id: context.senderId,
      message_id: context.session.last,
    });
  }
  context.session.last = message_id;
  context.session.context = null;
}

export async function handleMessage(
  context: MessageContext & PromptContext & SessionContext,
) {
  const user = await authorize(context);
  if (context.session.context) {
    //
  } else {
    await mainMenu(context, user);
    await context.delete().catch();
  }
}

export async function handleCallback(
  context: CallbackQueryContext & PromptContext & SessionContext,
) {
  const user = await authorize(context);
  const { action } = <{ action: Actions }>context.queryPayload;
  switch (action) {
    case Actions.back:
      break;
    case Actions.fresh:
      if (context.session.context) {
        //
      } else await mainMenu(context, user);
      break;
    case Actions.colony:
      break;
    case Actions.military:
      break;
    case Actions.trade:
      break;
    case Actions.help:
      break;
    default:
      break;
  }
  await context.answerCallbackQuery();
}

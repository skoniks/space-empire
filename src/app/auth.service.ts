import { Transaction } from 'sequelize';
import Action from '../entities/action.entity';
import Colony from '../entities/colony.entity';
import Factory, { FactoryType } from '../entities/factory.entity';
import TG from '../telegram/tg.module';

export async function authorize(
  chat_id: number,
  transaction?: Transaction,
): Promise<Colony> {
  let colony = await Colony.findOne({
    where: { chat: chat_id },
    include: [Action, Factory],
    transaction,
    lock: true,
  });
  if (colony) return colony;

  const lines = [
    '<i>–¢—Ä–µ—Ç—å—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞ –∑–∞—Å—Ç–∞–≤–∏–ª–∞ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ –ø–æ–∫–∏–Ω—É—Ç—å —Ä–æ–¥–Ω–æ–π –¥–æ–º' +
      ' –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ –ø–æ–∏—Å–∫–∏ –Ω–æ–≤–æ–≥–æ, –±–æ—Ä–æ–∑–¥—è –ø—Ä–æ—Å—Ç–æ—Ä—ã –±–µ—Å–∫—Ä–∞–π–Ω–µ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π.' +
      ' –í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º –ª–∏–Ω–∫–æ—Ä–æ–º –∫–ª–∞—Å—Å–∞ XL, –æ–¥–Ω–∏–º –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞' +
      ' —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–≤—á–µ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ª—é–¥–∏ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –∏–∑–±–µ–≥–∞—è –≤–æ–π–Ω—ã. –í–∞—à–∞' +
      ' –∑–∞–¥–∞—á–∞ - –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫–æ–ª–æ–Ω–∏—é –Ω–∞ –±–æ—Ä—Ç—É –∫ –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—é, –Ω–∞—Ä–∞—â–∏–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ' +
      ' –∏ –∞—Ä–º–∏—é, –∑–∞—â–∏—â–∞—Ç—å –∫–æ–ª–æ–Ω–∏—Å—Ç–æ–≤. –ò–∑–±—Ä–∞—Ç—å –ø—É—Ç—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –±—É–¥–µ—Ç–µ –≤–µ—Å—Ç–∏ –ª—é–¥–µ–π' +
      ' –≤ —Å–≤–µ—Ç–ª–æ–µ –±—É–¥—É—â–µ–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ, –Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–ª–æ–Ω–∏–∏‚Ä¶</i>',
    '',
    '',
    '[üìù –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–ª–æ–Ω–∏–∏]',
  ];

  const { message_id } = await TG.api.sendMessage({
    text: lines.join('\n'),
    chat_id,
    parse_mode: 'HTML',
  });
  try {
    const { id, text } = await TG.prompt(chat_id);
    await TG.api.deleteMessage({ chat_id, message_id: id }).catch();
    const name = (text || chat_id.toString(16)).substring(0, 10);
    colony = await Colony.create({ chat: chat_id, name }, { transaction });
    await Action.create(
      { colonyId: colony.id, message: message_id },
      { transaction },
    );
    await Factory.bulkCreate(
      [
        { colonyId: colony.id, type: FactoryType.mine, count: 1, level: 1 },
        { colonyId: colony.id, type: FactoryType.farm, count: 1, level: 1 },
      ],
      { transaction },
    );
    return await colony.reload({
      include: [Action, Factory],
      transaction,
      lock: true,
    });
  } catch (error) {
    await TG.api.deleteMessage({ chat_id, message_id }).catch();
    return await authorize(chat_id, transaction);
  }
}

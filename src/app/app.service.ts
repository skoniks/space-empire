// import { PromptContext } from '@puregram/prompt';
// import { SessionContext, SessionInterface } from '@puregram/session';
// import {
//   CallbackQueryContext,
//   HTML,
//   InlineKeyboard,
//   MessageContext,
// } from 'puregram';
// import BOT from '../telegram/tg.module';
// import User from '../entities/user.entity';

import { MessageContext } from 'puregram';
import TG from '../telegram/tg.module';

// enum Actions {
//   back,
//   fresh,
//   base,
//   military,
//   trade,
//   help,
// }

// function getPower(level = 1) {
//   const power = 100 * 1.5 ** (level - 1);
//   return power - (power % 5);
// }

// async function authorize(
//   context:
//     | (MessageContext & PromptContext)
//     | (CallbackQueryContext & PromptContext),
// ) {
//   if (!context.senderId) throw new Error('Invalid senderId');
//   const user = await User.findOne({ where: { chat: context.senderId } });
//   if (user) return user;
//   const message =
//     HTML.italic(
//       '–¢—Ä–µ—Ç—å—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞ –∑–∞—Å—Ç–∞–≤–∏–ª–∞ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ –ø–æ–∫–∏–Ω—É—Ç—å —Ä–æ–¥–Ω–æ–π –¥–æ–º' +
//         ' –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –Ω–∞ –ø–æ–∏—Å–∫–∏ –Ω–æ–≤–æ–≥–æ, –±–æ—Ä–æ–∑–¥—è –ø—Ä–æ—Å—Ç–æ—Ä—ã –±–µ—Å–∫—Ä–∞–π–Ω–µ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π.' +
//         ' –í—ã —É–ø—Ä–∞–≤–ª—è–µ—Ç–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º –ª–∏–Ω–∫–æ—Ä–æ–º –∫–ª–∞—Å—Å–∞ XL, –æ–¥–Ω–∏–º –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞' +
//         ' —Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–≤—á–µ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ª—é–¥–∏ –ø–æ—Å—Ç—Ä–æ–∏–ª–∏ –∏–∑–±–µ–≥–∞—è –≤–æ–π–Ω—ã. –í–∞—à–∞' +
//         ' –∑–∞–¥–∞—á–∞ - –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫–æ–ª–æ–Ω–∏—é –Ω–∞ –±–æ—Ä—Ç—É –∫ –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—é, –Ω–∞—Ä–∞—â–∏–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ' +
//         ' –∏ –∞—Ä–º–∏—é, –∑–∞—â–∏—â–∞—Ç—å –∫–æ–ª–æ–Ω–∏—Å—Ç–æ–≤. –ò–∑–±—Ä–∞—Ç—å –ø—É—Ç—å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –±—É–¥–µ—Ç–µ –≤–µ—Å—Ç–∏ –ª—é–¥–µ–π' +
//         ' –≤ —Å–≤–µ—Ç–ª–æ–µ –±—É–¥—É—â–µ–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ, –Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –≤—ã–±–µ—Ä–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–ª–æ–Ω–∏–∏‚Ä¶',
//     ) + '\n\n[–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–ª–æ–Ω–∏–∏]';
//   let { text } = await context.prompt(message, { parse_mode: 'HTML' });
//   text = (text || context.senderId.toString(16)).substring(0, 10);
//   return await User.create({ chat: context.senderId, name: text });
//   // TODO: Calculate energy, initial buildings
// }

// async function mainMenu(user: User, session: SessionContext) {
//   const message = [
//     `üö© –ö–æ–ª–æ–Ω–∏—è: ${HTML.bold(user.name)}`,
//     '',
//     `üí∏ –ö—Ä–µ–¥–∏—Ç—ã: ${HTML.bold(`${user.money}`)}`,
//     // `‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è: ${HTML.bold(`${user.power}`)}`,
//     `üíé –ú–∏–Ω–µ—Ä–∞–ª—ã: ${HTML.bold(`${user.iron}`)}`,
//     `üçñ –ü—Ä–æ–≤–∏–∑–∏—è: ${HTML.bold(`${user.food}`)}`,
//   ].join('\n');
//   const keyboard = InlineKeyboard.keyboard([
//     [
//       InlineKeyboard.textButton({
//         text: 'üè≠ –ë–∞–∑–∞',
//         payload: { action: Actions.base },
//       }),
//       InlineKeyboard.textButton({
//         text: '‚öîÔ∏è –ê—Ä–º–∏—è',
//         payload: { action: Actions.military },
//       }),
//     ],
//     [
//       InlineKeyboard.textButton({
//         text: '‚öñÔ∏è –ë–∏—Ä–∂–∞',
//         payload: { action: Actions.trade },
//       }),
//       InlineKeyboard.textButton({
//         text: 'üìî –°–ø—Ä–∞–≤–∫–∞',
//         payload: { action: Actions.help },
//       }),
//     ],
//     [
//       InlineKeyboard.textButton({
//         text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
//         payload: { action: Actions.fresh },
//       }),
//     ],
//   ]);
//   const { message_id } = await BOT.api.sendMessage({
//     text: message,
//     chat_id: user.chat,
//     reply_markup: keyboard,
//     parse_mode: 'HTML',
//   });
//   if (session.last) {
//     await BOT.api
//       .deleteMessage({
//         chat_id: user.chat,
//         message_id: session.last,
//       })
//       .catch();
//   }
//   session.last = message_id;
//   session.action = null;
// }

// async function baseMenu(user: User, session: SessionContext) {
//   const power = getPower(user.level);
//   const message = [
//     `üè≠ –ë–∞–∑–∞ [${HTML.bold(`  ü·¥† ü ${user.level} `)}] ( 10 / ${power}‚ö°Ô∏è)`,
//     '',
//     `üõ† –®–∞—Ö—Ç—ã [ ${10029} üíé]: `,
//     '  -  ü·¥† ü 1 : 100 —à—Ç. = 100 / –º–∏–Ω',
//     '  -  ü·¥† ü 2 : 50 —à—Ç. = 100 / –º–∏–Ω',
//     '',
//     `üê∑ –§–µ—Ä–º—ã ( ${0} / –º–∏–Ω ) => üçñ`,
//   ].join('\n');
//   const keyboard = InlineKeyboard.keyboard([
//     [
//       InlineKeyboard.textButton({
//         text: 'üì¶ –°–æ–±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã',
//         payload: { action: Actions.base },
//       }),
//     ],
//     [
//       InlineKeyboard.textButton({
//         text: 'üõ† –ö—É–ø–∏—Ç—å [ 100 üí∏]',
//         payload: { action: Actions.base },
//       }),
//       InlineKeyboard.textButton({
//         text: 'üõ†  ü·¥† ü ·¥ú·¥ò [ 50 üí∏]',
//         payload: { action: Actions.base },
//       }),
//     ],
//     [
//       InlineKeyboard.textButton({
//         text: 'üê∑ –ö—É–ø–∏—Ç—å [ 100 üí∏]',
//         payload: { action: Actions.base },
//       }),
//       InlineKeyboard.textButton({
//         text: 'üê∑  ü·¥† ü ·¥ú·¥ò [ 50 üí∏]',
//         payload: { action: Actions.base },
//       }),
//     ],
//     [
//       InlineKeyboard.textButton({
//         text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
//         payload: { action: Actions.back },
//       }),
//       InlineKeyboard.textButton({
//         text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
//         payload: { action: Actions.fresh },
//       }),
//     ],
//   ]);
//   const { message_id } = await BOT.api.sendMessage({
//     text: message,
//     chat_id: user.chat,
//     reply_markup: keyboard,
//     parse_mode: 'HTML',
//   });
//   if (session.last) {
//     await BOT.api
//       .deleteMessage({
//         chat_id: user.chat,
//         message_id: session.last,
//       })
//       .catch();
//   }
//   session.last = message_id;
//   session.action = Actions.base;
// }

// async function militaryMenu(user: User, session: SessionContext) {
//   //
// }

// async function tradeMenu(user: User, session: SessionContext) {
//   //
// }

// async function helpMenu(user: User, session: SessionContext) {
//   //
// }

// async function handleAction(
//   user: User,
//   action: Actions | null,
//   context: (MessageContext | CallbackQueryContext) &
//     PromptContext &
//     SessionInterface,
// ): Promise<{ text?: string }> {
//   switch (action) {
//     case Actions.back:
//       await mainMenu(user, context.session);
//       return {};
//     case Actions.fresh:
//       if (context.session.action) {
//         await handleAction(user, context.session.action, context);
//         return {};
//       } else {
//         await mainMenu(user, context.session);
//         return {};
//       }
//     case Actions.base:
//       await baseMenu(user, context.session);
//       return {};
//     case Actions.military:
//       break;
//     case Actions.trade:
//       break;
//     case Actions.help:
//       break;
//     default:
//       break;
//   }
//   return {};
// }

// export async function handleMessage(
//   context: MessageContext & PromptContext & SessionInterface,
// ) {
//   const user = await authorize(context);
//   if (context.session.action) {
//     await handleAction(user, context.session.action, context);
//   } else await mainMenu(user, context.session);
//   await context.delete().catch();
// }

// export async function handleCallback(
//   context: CallbackQueryContext & PromptContext & SessionInterface,
// ) {
//   const user = await authorize(context);
//   const { action = null } = <{ action: Actions }>context.queryPayload;
//   const { text } = await handleAction(user, action, context);
//   await context.answerCallbackQuery({ text });
// }

export async function handleMessage(context: MessageContext) {
  const [request, response] = await TG.prompt({
    text: 'Who are u?',
    chat_id: context.chatId,
  });
  console.log(request, response);
  // console.log(context);
}

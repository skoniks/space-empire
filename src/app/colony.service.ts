import { InlineKeyboard } from 'puregram';
import { Transaction } from 'sequelize';
import { ActionType } from '../entities/action.entity';
import Colony from '../entities/colony.entity';
import Factory, { FactoryType } from '../entities/factory.entity';
import { drawMenu } from './menu.service';

const format = (i: Factory) =>
  `  -  ü·¥† ü ${i.level} : ${i.count} —à—Ç. ‚Üí ${i.level * i.count} / –º–∏–Ω`;

export async function colonyMenu(colony: Colony) {
  const power = colony.power();
  let iron = 0;
  let food = 0;
  let minesProfit = 0;
  let farmsProfit = 0;
  const mines: Factory[] = [];
  const farms: Factory[] = [];
  for (const i of colony.factories) {
    if (!i.count) continue;
    switch (i.type) {
      case FactoryType.mine:
        minesProfit += i.level * i.count;
        iron += i.profit();
        mines.push(i);
        break;
      case FactoryType.farm:
        farmsProfit += i.level * i.count;
        food += i.profit();
        farms.push(i);
        break;
    }
  }
  mines.sort((a, b) => a.level - b.level);
  farms.sort((a, b) => a.level - b.level);
  const lines = [
    `üè≠ –ë–∞–∑–∞ [ <b> ü·¥† ü ${colony.level}</b> ] ( ${power.left} / ${power.total}‚ö°Ô∏è)`,
    `üì¶ –°–æ–±—Ä–∞—Ç—å: [ <b>${iron} üíé</b>], [ <b>${food} üçñ</b>]`,
    '',
    `üõ† –®–∞—Ö—Ç—ã ‚Üí ${minesProfit} / –º–∏–Ω:`,
    ...mines.map((i) => format(i)),
    '',
    `üê∑ –§–µ—Ä–º—ã ‚Üí ${farmsProfit} / –º–∏–Ω:`,
    ...farms.map((i) => format(i)),
  ];
  const keyboard = InlineKeyboard.keyboard([
    [
      InlineKeyboard.textButton({
        text: 'üì¶ –°–æ–±—Ä–∞—Ç—å',
        payload: { action: ActionType.profit },
      }),
      InlineKeyboard.textButton({
        text: 'üè≠ –£–ª—É—á—à–∏—Ç—å',
        payload: { action: ActionType.upgrade },
      }),
    ],
    [
      InlineKeyboard.textButton({
        text: 'üõ† –®–∞—Ö—Ç—ã',
        payload: { action: ActionType.mines },
      }),
      InlineKeyboard.textButton({
        text: 'üê∑ –§–µ—Ä–º—ã',
        payload: { action: ActionType.farms },
      }),
    ],
    [
      InlineKeyboard.textButton({
        text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
        payload: { action: ActionType.fresh },
      }),
    ],
    [
      InlineKeyboard.textButton({
        text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
        payload: { action: ActionType.back },
      }),
    ],
  ]);
  await drawMenu(colony, lines.join('\n'), keyboard);
  colony.action.type = ActionType.colony;
}

export async function colonyProfit(colony: Colony, transaction: Transaction) {
  for (const i of colony.factories) {
    if (!i.count) continue;
    switch (i.type) {
      case FactoryType.mine:
        colony.iron += i.profit();
        break;
      case FactoryType.farm:
        colony.food += i.profit();
        break;
    }
    i.updatedAt = new Date();
    i.changed('updatedAt', true);
    await i.save({ transaction });
  }
  await colony.save({ transaction });
  await colonyMenu(colony);
  return { text: '–†–µ—Å—É—Ä—Å—ã —Å–æ–±—Ä–∞–Ω—ã' };
}

export async function colonMinesMeny(colony: Colony) {
  let totalProfit = 0;
  let totalUpgrade = 0;
  const mines: Factory[] = [];
  for (const i of colony.factories) {
    if (!i.count || i.type != FactoryType.mine) continue;
    if (i.level < colony.level) totalUpgrade += i.count;
    totalProfit += i.level * i.count;
    mines.push(i);
  }
  mines.sort((a, b) => a.level - b.level);
  const power = colony.power();
  const purchase = Math.floor(Math.min(power.left / 5, colony.money / 50));
  const upgrade = Math.floor(Math.min(totalUpgrade, colony.money / 25));
  const lines = [
    `üõ† –®–∞—Ö—Ç—ã ‚Üí ${totalProfit} / –º–∏–Ω:`,
    ...mines.map((i) => format(i)),
    '',
    `–†–µ—Å—É—Ä—Å—ã: <b>${colony.money} üí∏, ${power.left} / ${power.total}‚ö°Ô∏è</b>`,
    '',
    'üõÑ –ü–æ–∫—É–ø–∫–∞: <b>50 üí∏, 5‚ö°Ô∏è</b>',
    `  - –î–æ—Å—Ç—É–ø–Ω–æ: ${purchase} —à—Ç.`,
    '',
    'üíπ –£–ª—É—á—à–µ–Ω–∏–µ: <b>25 üí∏, 0‚ö°Ô∏è</b>',
    `  - –î–æ—Å—Ç—É–ø–Ω–æ: ${upgrade} —à—Ç.`,
  ];
  const keyboard = InlineKeyboard.keyboard([
    [
      InlineKeyboard.textButton({
        text: 'üõÑ –ö—É–ø–∏—Ç—å',
        payload: { action: ActionType.purchase },
      }),
      InlineKeyboard.textButton({
        text: 'üíπ –£–ª—É—á—à–∏—Ç—å',
        payload: { action: ActionType.upgrade },
      }),
    ],
    [
      InlineKeyboard.textButton({
        text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å',
        payload: { action: ActionType.fresh },
      }),
    ],
    [
      InlineKeyboard.textButton({
        text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
        payload: { action: ActionType.back },
      }),
    ],
  ]);
  await drawMenu(colony, lines.join('\n'), keyboard);
  colony.action.type = ActionType.mines;
}

export async function colonFarmsMeny(colony: Colony) {
  //
}

export async function colonyPurchase(colony: Colony, transaction: Transaction) {
  const power = colony.power();
  const purchase = Math.floor(Math.min(power.left / 5, colony.money / 50));
  if (purchase < 1) return { text: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤' };
  for (const i of colony.factories) {
    if (i.type != FactoryType.mine) continue;
    if (i.level != 1) continue;
    colony.iron += i.profit();
    i.count += 1;
    i.updatedAt = new Date();
    await i.save({ transaction });
  }
  colony.money -= 50;
  await colonMinesMeny(colony);
  return { text: '–®–∞—Ö—Ç–∞ –∫—É–ø–ª–µ–Ω–∞' };
}
